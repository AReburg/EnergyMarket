{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f3bfbd0",
   "metadata": {},
   "source": [
    "### Ports\n",
    "\n",
    "https://wiki.openmod-initiative.org/wiki/SciGRID_gas\n",
    "\n",
    "maybe\n",
    "http://users.dimi.uniud.it/~massimo.franceschet/ns/syllabus/make/gas/gas.html\n",
    "\n",
    "https://github.com/mihai-craita/countries_center_box\n",
    "\n",
    "https://github.com/EnergieID/entsoe-py/blob/master/entsoe/mappings.py\n",
    "\n",
    "country codes and examples:\n",
    "https://thesmartinsights.com/how-to-query-data-from-the-entso-e-transparency-platform-using-python/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb8c549c",
   "metadata": {},
   "source": [
    "```python\n",
    "# vessel = !python scripts/get_vessels.py\n",
    "data = !python scripts/get_vessels.py data.csv\n",
    "df = pd.DataFrame(data=data)[0].str.split(',',expand=True)\n",
    "df.head(3)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d816bd0",
   "metadata": {},
   "source": [
    "https://stackoverflow.com/questions/68762104/plotly-adding-scatter-geo-points-and-traces-on-top-of-density-mapbox"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecfa2435",
   "metadata": {},
   "source": [
    "```python\n",
    "from nltk.corpus import wordnet as wn\n",
    "from itertools import product\n",
    "\n",
    "wordx, wordy = \"cat\",\"dog\"\n",
    "sem1, sem2 = wn.synsets(wordx), wn.synsets(wordy)\n",
    "\n",
    "maxscore = 0\n",
    "for i,j in list(product(*[sem1,sem2])):\n",
    "    score = i.wup_similarity(j) # Wu-Palmer Similarity\n",
    "    maxscore = score if maxscore < score else maxscore\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f727196",
   "metadata": {},
   "source": [
    "```python\n",
    "import sys\n",
    "!{sys.executable} -m pip install geopy\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13693daf",
   "metadata": {},
   "source": [
    "```python\n",
    "from geopy.distance import geodesic\n",
    "origin = (30.172705, 31.526725)  # (latitude, longitude) don't confuse\n",
    "dist = (30.288281, 31.732326)\n",
    "print(geodesic(origin, dist).kilometers)  # 23.576805481751613\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90ad5997",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import modules/libraries\n",
    "import warnings \n",
    "warnings.simplefilter(action='ignore')\n",
    "from entsoe import EntsoePandasClient\n",
    "import pandas as pd\n",
    "import json\n",
    "import requests\n",
    "from pandas import json_normalize\n",
    "from bs4 import BeautifulSoup\n",
    "from shapely.geometry import Polygon, LineString\n",
    "import osmnx as ox\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import time\n",
    "from datetime import datetime\n",
    "from scipy import stats\n",
    "from pathlib import Path\n",
    "import itertools\n",
    "import os\n",
    "import pickle\n",
    "import geojson\n",
    "from sqlalchemy import create_engine\n",
    "import re\n",
    "import sqlite3\n",
    "from pathlib import Path\n",
    "\n",
    "# geo libraries\n",
    "from shapely.geometry import Point\n",
    "from shapely.geometry.polygon import Polygon\n",
    "from shapely.geometry.multipolygon import MultiPolygon\n",
    "import chardet\n",
    "from scipy import spatial\n",
    "from scipy.spatial import KDTree\n",
    "from shapely import wkt\n",
    "from geopy.distance import geodesic\n",
    "from geopandas import GeoDataFrame\n",
    "import shapely.ops\n",
    "import shapely.geometry\n",
    "from shapely.geometry import Polygon, LineString\n",
    "cwd = Path().resolve()\n",
    "\n",
    "# visualisation\n",
    "import plotly.io as pio\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "import plotly.figure_factory as ff\n",
    "import seaborn as sns\n",
    "import matplotlib as mpl \n",
    "%matplotlib inline \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "817453d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#vessel = pd.read_csv('./data/lng_tankers_lat.csv', index_col=False)\n",
    "conn = sqlite3.connect('file.db')\n",
    "vessel = pd.read_sql_query(\"SELECT * FROM lng\", conn)\n",
    "\n",
    "vessel.sort_values(by='DWT', ascending=False, inplace=True)\n",
    "\n",
    "geometry = [Point(xy) for xy in zip(vessel.lon, vessel.lat)]\n",
    "# vessel = vessel.drop(['lon', 'lat'], axis=1)\n",
    "vessel = GeoDataFrame(vessel, crs=\"EPSG:4326\", geometry=geometry)\n",
    "vessel.head()\n",
    "\n",
    "vessel = vessel[~(vessel['date'] == '2022-12-20')]\n",
    "vessel.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ecf373c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def get_port_distance(lat, lon, max_distance):\n",
    "    \"\"\"\n",
    "    latitude and longitude of the port and maxiaml distance of the vessel to the port\n",
    "    \"\"\"\n",
    "    dist_list = []\n",
    "    for index, row in vessel.iterrows():\n",
    "        try:\n",
    "            origin = (row['lat'], row['lon'])  # (latitude, longitude) don't confuse\n",
    "            dist = (lat, lon)\n",
    "            distance = round(geodesic(origin, dist).kilometers)\n",
    "            # print(row['imo'], distance)\n",
    "            if distance < max_distance:\n",
    "                dist_list.append(row['imo'])\n",
    "        except Exception as e:\n",
    "            # print(e)\n",
    "            pass\n",
    "    return dist_list\n",
    "\n",
    "def radius_around_port(lat, lon, radius_in_meter):\n",
    "    radius = gpd.GeoDataFrame({'ship': f'test', 'geometry': [Point(lon, lat)]}, crs='EPSG:4326')\n",
    "    radius = radius.to_crs(epsg=7855).buffer(radius_in_meter).to_crs(epsg=4326)\n",
    "    boundary_geojson = gpd.GeoSeries(radius)\n",
    "    region = boundary_geojson.geometry.unary_union\n",
    "    return region\n",
    "\n",
    "def get_line(poly):\n",
    "    try:\n",
    "        #ls = shapely.geometry.LineString(df) # shapely.geometry.LineString(shapely.ops.unary_union(df).exterior.coords)\n",
    "        b = poly.boundary.coords\n",
    "        ls = shapely.geometry.LineString(b)\n",
    "        #linestrings = [LineString(b[k:k+2]) for k in range(len(b) - 1)]\n",
    "        #print([list(ls.coords) for ls in linestrings])\n",
    "        lats, lons = ls.coords.xy\n",
    "        return pd.Series([lats, lons])\n",
    "    except Exception as e:\n",
    "        # print(e)\n",
    "        return pd.Series([np.nan, np.nan])\n",
    "\n",
    "\n",
    "p = pd.read_csv('./data/GIE_LNGs_V1.csv', index_col=False)\n",
    "p['bubble'] = p.apply(lambda x: radius_around_port(x['lat'], x['lon'], radius_in_meter=80000), axis=1)\n",
    "p[['lats','lons']] = p.apply(lambda x: get_line(x['bubble']), axis=1)\n",
    "ports = p.copy()\n",
    "ports['vessels_close'] = ports.apply(lambda x: get_port_distance(x['lat'], x['lon'], 30), axis=1)\n",
    "ports.tail(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1586b7e",
   "metadata": {},
   "source": [
    "### References Konkurrenz\n",
    "https://lng.team/#prices\n",
    "https://medium.com/analytics-vidhya/how-to-create-a-simple-web-app-for-a-vessels-eta-api-using-python-db485182a8c2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8873ba0",
   "metadata": {},
   "outputs": [],
   "source": [
    "vessel.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00c96133",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %load scripts/draw_map.py\n",
    "\n",
    "def add_ship(fig, df, col=\"#76b5c5\", size=12):\n",
    "    try:\n",
    "        print(df.head())\n",
    "        #template=f\"<br>Name: {df['imo']}</b><extra></extra>\"\n",
    "        fig.add_scattermapbox(\n",
    "            lat=df['lat'].tolist(), lon=df['lon'].tolist(), mode='markers',\n",
    "            #hovertemplate=template,\n",
    "            marker_size=size, marker_color=col,\n",
    "            line=dict(width=6),opacity= 0.4, hoverinfo='none',\n",
    "            showlegend=False,)\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "        \n",
    "def add_radius(fig, df):\n",
    "    try:\n",
    "        radius_in_meter = 10000\n",
    "        fig.add_trace(go.Scattermapbox(\n",
    "                mode=\"lines\",\n",
    "                lon=list(df['lats']),\n",
    "                lat=list(df['lons']),\n",
    "                name=f\"{radius_in_meter} m radius\",\n",
    "                hoverinfo='skip',\n",
    "                showlegend=False,\n",
    "                marker={'size': 15, 'color': 'red', 'opacity': 0.6}))\n",
    "    except Exception as e:\n",
    "        pass\n",
    "\n",
    "    \n",
    "def add_ports(fig, df, col=\"#bbb5c5\", symbol=\"harbor\", size=12):\n",
    "    try:\n",
    "        if symbol == \"harbor\":\n",
    "            fig.add_scattermapbox(\n",
    "            name='Home', lat=df['lat'].tolist(), lon=df['lon'].tolist(),\n",
    "            mode='markers+text',\n",
    "            marker=dict(size=size, color=col),\n",
    "            text=df['Name'].tolist(),\n",
    "            textposition=\"bottom center\",\n",
    "            hoverinfo='text',\n",
    "            textfont=dict(color='black', size=10),\n",
    "            showlegend=False,)\n",
    "                \n",
    "        else:\n",
    "            #template=f\"<br>Name: {df['imo']}</b><extra></extra>\"\n",
    "            fig.add_scattermapbox(\n",
    "                name='Home',\n",
    "                lat=df['lat'].tolist(), lon=df['lon'].tolist(),\n",
    "                mode='markers',\n",
    "                #hovertemplate=template,\n",
    "                #marker_size=size, \n",
    "                #marker_color=col,\n",
    "                marker=dict(size=size, symbol=symbol, color=col),\n",
    "                #line=dict(width=6),\n",
    "                #if symbol == \"harbor\":\n",
    "                #    text=df['Name'].tolist(),\n",
    "               #    textposition=\"bottom center\",\n",
    "                #    hoverinfo='text',\n",
    "               #     textfont=dict(color='black', size=10),\n",
    "\n",
    "                showlegend=False,)\n",
    "\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "def world_map(vessel, ports):\n",
    "    fig = go.Figure()\n",
    "    \n",
    "    # add traces\n",
    "    add_ports(fig, ports, col=\"#76b5c5\", symbol=\"harbor\", size=16)\n",
    "    add_ports(fig, vessel, col=\"#be4d25\", symbol=\"marker\", size=10)\n",
    "    \n",
    "    for index, row in ports.iterrows():\n",
    "        add_radius(fig, row)\n",
    "\n",
    "        \n",
    "    fig.update_layout(mapbox_style=\"light\", mapbox_accesstoken=\n",
    "                      \"pk.eyJ1IjoiYXJlYnVyZyIsImEiOiJjbDZkZzdhOXAwNTk5M2ZteDdkY3lvd2FsIn0.c4hsFv69HozIVHq7ItrTzg\",\n",
    "                      mapbox_zoom=3, mapbox_center={\"lat\": 47.809490, \"lon\": 13.055010})\n",
    "    fig.update_layout(font=dict(family=\"Helvetica\"), legend={\"title\": \"Select category\"})\n",
    "    fig.update_layout(margin={\"r\": 0, \"t\": 40, \"l\": 0, \"b\": 0}, paper_bgcolor='rgba(0,0,0,0)',\n",
    "                  plot_bgcolor='rgba(0,0,0,0)')\n",
    "    fig.update_layout(title_text = 'Global LNG ports and LNG carrier fleets')\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "world_map(vessel, ports)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfc81709",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25d75ee6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dft = vessel.copy()\n",
    "dft= dft.groupby('imo').agg({'lat':lambda x: list(x), 'lon':lambda x: list(x)})\n",
    "dft.tail()\n",
    "\n",
    "def add_trace(fig, df, col=\"#76b5c5\", size=12):\n",
    "    try:\n",
    "       # template=f\"<br>Name: {df['imo']}</b><extra></extra>\"\n",
    "        fig.add_scattermapbox(\n",
    "            lat=df['lat'], lon=df['lon'], mode=\"markers+text+lines\",\n",
    "            #hovertemplate=template,\n",
    "        showlegend=False\n",
    "        )\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "def add_trace2(fig, df, col=\"#76b5c5\", size=12):\n",
    "    try:\n",
    "       # template=f\"<br>Name: {df['imo']}</b><extra></extra>\"\n",
    "        fig.add_scattermapbox(\n",
    "            lat=df['lat'], lon=df['lon'], mode=\"markers+text+lines\",\n",
    "            #hovertemplate=template,\n",
    "        showlegend=False\n",
    "        )\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "def add_ports(fig, df, col=\"#bbb5c5\", symbol=\"harbor\", size=12):\n",
    "    try:\n",
    "        if symbol == \"harbor\":\n",
    "            fig.add_scattermapbox(\n",
    "            name='Home', lat=df['lat'].tolist(), lon=df['lon'].tolist(),\n",
    "            mode='markers+text',\n",
    "            marker=dict(size=size, color=col),\n",
    "            text=df['Name'].tolist(),\n",
    "            textposition=\"bottom center\",\n",
    "            hoverinfo='text',\n",
    "            textfont=dict(color='black', size=10),\n",
    "            showlegend=False,)\n",
    "        else:\n",
    "            #template=f\"<br>Name: {df['imo']}</b><extra></extra>\"\n",
    "            fig.add_scattermapbox(\n",
    "                name='Home',\n",
    "                lat=df['lat'].tolist(), lon=df['lon'].tolist(),\n",
    "                mode='markers',\n",
    "                marker=dict(size=size, symbol=symbol, color=col),\n",
    "                showlegend=False,)\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "\n",
    "def world_map_V2(vessel, ports):\n",
    "    fig = go.Figure()\n",
    "    \n",
    "    # add traces\n",
    "    add_ports(fig, ports, col=\"#76b5c5\", symbol=\"harbor\", size=16)\n",
    "    \n",
    "\n",
    "    #add_trace2(fig, dft)\n",
    "    \n",
    "    for index, row in dft.iterrows():\n",
    "        add_trace(fig, row)\n",
    "\n",
    "        \n",
    "    fig.update_layout(mapbox_style=\"light\", mapbox_accesstoken=\n",
    "                      \"pk.eyJ1IjoiYXJlYnVyZyIsImEiOiJjbDZkZzdhOXAwNTk5M2ZteDdkY3lvd2FsIn0.c4hsFv69HozIVHq7ItrTzg\",\n",
    "                      mapbox_zoom=3, mapbox_center={\"lat\": 47.809490, \"lon\": 13.055010})\n",
    "    fig.update_layout(font=dict(family=\"Helvetica\"), legend={\"title\": \"Select category\"})\n",
    "    fig.update_layout(margin={\"r\": 0, \"t\": 40, \"l\": 0, \"b\": 0}, paper_bgcolor='rgba(0,0,0,0)',\n",
    "                  plot_bgcolor='rgba(0,0,0,0)')\n",
    "    fig.update_layout(title_text = 'Global LNG ports and LNG carrier fleets')\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "world_map_V2(vessel, ports)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af1c2cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.line_mapbox(vessel, lat=\"lat\", lon=\"lon\", color=\"imo\", zoom=3, height=300)\n",
    "\n",
    "fig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_zoom=4, mapbox_center_lat = 41,\n",
    "    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n",
    "fig.update_layout(mapbox_style=\"light\", mapbox_accesstoken=\n",
    "                  \"pk.eyJ1IjoiYXJlYnVyZyIsImEiOiJjbDZkZzdhOXAwNTk5M2ZteDdkY3lvd2FsIn0.c4hsFv69HozIVHq7ItrTzg\",\n",
    "                  mapbox_zoom=3, mapbox_center={\"lat\": 47.809490, \"lon\": 13.055010})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e610042",
   "metadata": {},
   "outputs": [],
   "source": [
    "dft2 = vessel.copy()\n",
    "vessel.head()\n",
    "dft2.dropna(subset=['lon', 'lat'], inplace=True)\n",
    "dft2.head(600)\n",
    "\n",
    "dft3= dft2.groupby('imo').agg({'lat':lambda x: list(x), 'lon':lambda x: list(x), 'geometry':lambda x: list(x), 'date':lambda x: list(x)})\n",
    "\n",
    "def generate_linestring(geometry):\n",
    "    #LineString([Point(0, 0), Point(1, 1)]).wkt\n",
    "    try:\n",
    "        # works also with comprehensive list\n",
    "        return LineString(geometry).wkt\n",
    "    except Exception as e:\n",
    "        return -1\n",
    "\n",
    "dft3['line'] = dft3.apply(lambda x: generate_linestring(x['geometry']), axis=1)\n",
    "\n",
    "dft3.reset_index(inplace=True)\n",
    "dft3 = dft3.rename(columns = {'index':'imo'})\n",
    "dft3.tail()\n",
    "\n",
    "lats = []\n",
    "lons = []\n",
    "names = []\n",
    "for index, row in dft3.iterrows():\n",
    "    for i in row['lat']:\n",
    "        lats = np.append(lats, i)\n",
    "        \n",
    "    for i in row['lon']:\n",
    "        lons = np.append(lons, i)\n",
    "        \n",
    "    for i in range(len(row['lat'])):\n",
    "        names = np.append(names, row['imo'])\n",
    "    \n",
    "    lats = np.append(lats, None)\n",
    "    lons = np.append(lons, None) \n",
    "    names = np.append(names, None) \n",
    "fig = px.line_geo(lat=lats, lon=lons, hover_name=names)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53bb518d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dft = vessel.copy()\n",
    "dft= dft.groupby('imo').agg({'lat':lambda x: list(x), 'lon':lambda x: list(x), 'geometry':lambda x: list(x), 'date':lambda x: list(x)})\n",
    "\n",
    "def generate_linestring(geometry):\n",
    "    #LineString([Point(0, 0), Point(1, 1)]).wkt\n",
    "    try:\n",
    "        # works also with comprehensive list\n",
    "        return LineString(geometry).wkt\n",
    "    except Exception as e:\n",
    "        pass\n",
    "\n",
    "dft['line'] = dft.apply(lambda x: generate_linestring(x['geometry']), axis=1)\n",
    "\n",
    "dft.reset_index(inplace=True)\n",
    "dft = dft.rename(columns = {'index':'imo'})\n",
    "\n",
    "dft.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "131f62bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "lats = []\n",
    "lons = []\n",
    "names = []\n",
    "import numpy as np\n",
    "import shapely.geometry\n",
    "for index, row in dft.iterrows():\n",
    "    try:\n",
    "        lats = np.append(lats, row['lat'][0])\n",
    "\n",
    "        lons = np.append(lons, row['lon'][0])\n",
    "\n",
    "       # names = np.append(names, [row['imo']] * len(row['lat']))\n",
    "        \n",
    "        lats = np.append(lats, None)\n",
    "        lons = np.append(lons, None)\n",
    "       # names = np.append(names, None)\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "        \n",
    "fig = px.line_geo(lat=lats, lon=lons)#, hover_name=names)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5dc56095",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "us_cities = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\")\n",
    "\n",
    "us_cities = us_cities.query(\"State in ['New York', 'Ohio']\")\n",
    "print(us_cities.head())\n",
    "import plotly.express as px\n",
    "\n",
    "fig = px.line_mapbox(us_cities, lat=\"lat\", lon=\"lon\", color=\"State\", zoom=3, height=300)\n",
    "\n",
    "fig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_zoom=4, mapbox_center_lat = 41,\n",
    "    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75284915",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "460c2629",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_if_coord_in_poly(region, lon, lat):\n",
    "    \"\"\"\n",
    "    Check if a coordinate (lat,long) is within a given polygon\n",
    "    Used to check for an address in vienna geometry\n",
    "    source: https://stackoverflow.com/questions/48097742/geopandas-point-in-polygon\n",
    "    Return: True if Point within Polygon\n",
    "    \n",
    "    source: https://stackoverflow.com/questions/36399381/whats-the-fastest-way-of-checking-if-a-point-is-inside-a-polygon-in-python\n",
    "    \n",
    "    \"\"\"\n",
    "    \"\"\"\n",
    "    _pnts = [Point(lon, lat)]\n",
    "    poly = gpd.GeoSeries({'within': region})\n",
    "    pnts = gpd.GeoDataFrame(geometry=_pnts, index=['Point to check'], crs=get_local_crs(lon, lat))\n",
    "    pnts = pnts.assign(**{key: pnts.within(geom) for key, geom in poly.items()})\n",
    "    return pnts['within'].item()\n",
    "    \"\"\"\n",
    "    point = Point(lon, lat)\n",
    "    # print(region.contains(point))\n",
    "    # return (point.within(region))\n",
    "    #if region.contains(point):\n",
    "    #    print(region.contains(point))\n",
    "    return region.contains(point)\n",
    "    \n",
    "#for index, row in ports.iterrows():\n",
    "#    vessel['close_to_harbor'] = vessel.apply(lambda x: check_if_coord_in_poly(row['bubble'], x['lon'], x['lat']), axis=1)\n",
    "# vessel.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "012b44e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# http://www.lngplants.com/conversiontables.html\n",
    "Natural gas: \n",
    "HHV = 1027 Btu/ft3 = 38.3 MJ/m3\n",
    "LHV    = 930 Btu/ft3 = 34.6 MJ/m3\n",
    " In the case of natural gas the ratio of HHV to LHV is approximately 1.108:1.\n",
    "        \n",
    "\n",
    "1,012      Btu/standard cubic foot methane             [Ref: Chemical Engineers’ Handbook. John H Perry, ed. McGraw-Hill Book Company: New York, 1963. Pg 9-9.]\n",
    "19           1,050     Btu/standard cubic foot natural gas\n",
    "\n",
    "Methane      0.941      Million Btu/Thousand Cubic Feet\n",
    "http://www.nrel.gov/vehiclesandfuels/ngvtf/pdfs/lng_fuel_sys_tech_wegrzyn.pdf"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
